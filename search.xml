<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>新喜剧之王:我是程序员</title>
    <url>/2019/03/19/qi/</url>
    <content><![CDATA[<!-- keywords: 新喜剧之王
description: 余 弱冠之年有余一，生性执拗、孤僻。自负于人不喜与人交际。 -->
<!-- bgm-老男孩 -->

<h3 id="回想起这几日亦或是这接近一个月的时间由来甚是悲悯"><a href="#回想起这几日亦或是这接近一个月的时间由来甚是悲悯" class="headerlink" title="回想起这几日亦或是这接近一个月的时间由来甚是悲悯"></a>回想起这几日亦或是这接近一个月的时间由来甚是悲悯</h3><p><img src="https://img.bhongjun.com/hexo-blog-img/2019/03/qi_cover.jpg" alt="青帝"></p>
<h5 id="先来看一段好友于己的一些话-汝之心急，找工作之迫切，放弃校招平台，毅然决然去异地社招，汝之勇气，已盖过众人矣。汝在外已一月有余，还未找到相关之岗位，便证明汝之不足。去校招历练，未尝不可，社招随时可去也，此对能力要求之高，汝已经历。汝若以回头便是丢人为由，好好想想这人丢哪了，你又认识谁，谁又认识你？浪子回头，乃是重整旗鼓，东山再起。哪条路好走，那条路难走。好马不吃回头草，可是食不饱，力不足，才美不外先，怎能不食也。说句身边现实的，连smb当初铁骨铮铮说想快点工作，如今不也回来深造之。对未来之投资，过了如今之年纪，机会甚少之。我也不是劝你升本，劝你深思熟虑之，非杭州不取，乃不是好策也。来杭州干IT应该是你目前的理想，但现实你又干的啥。我眼里看到的是每天的你都在煎熬，干现在与理想无关之工作是为了什么？赚生活费立足于杭州-还是苟延残喘于杭州-是否应该退而求其次，建议回来参加校招找份相关岗位历练，或者继续学习。不说校招也罢，华夏之大，为啥非杭州不可？而不是现在干的完全不相干的工作，心情也是窝心烦躁罢了。我虽决意不干IT这行，但据我所知，IT实习是最好的学习，而不是妥协于生活在外干别的，因为不是一天两天的事，这样对专业知识不增反减，当断不断，反受其乱。汝大可回来或者去别处好好找份实习增长经验，他日有了经验再战杭州不迟，毕竟你还年轻！"><a href="#先来看一段好友于己的一些话-汝之心急，找工作之迫切，放弃校招平台，毅然决然去异地社招，汝之勇气，已盖过众人矣。汝在外已一月有余，还未找到相关之岗位，便证明汝之不足。去校招历练，未尝不可，社招随时可去也，此对能力要求之高，汝已经历。汝若以回头便是丢人为由，好好想想这人丢哪了，你又认识谁，谁又认识你？浪子回头，乃是重整旗鼓，东山再起。哪条路好走，那条路难走。好马不吃回头草，可是食不饱，力不足，才美不外先，怎能不食也。说句身边现实的，连smb当初铁骨铮铮说想快点工作，如今不也回来深造之。对未来之投资，过了如今之年纪，机会甚少之。我也不是劝你升本，劝你深思熟虑之，非杭州不取，乃不是好策也。来杭州干IT应该是你目前的理想，但现实你又干的啥。我眼里看到的是每天的你都在煎熬，干现在与理想无关之工作是为了什么？赚生活费立足于杭州-还是苟延残喘于杭州-是否应该退而求其次，建议回来参加校招找份相关岗位历练，或者继续学习。不说校招也罢，华夏之大，为啥非杭州不可？而不是现在干的完全不相干的工作，心情也是窝心烦躁罢了。我虽决意不干IT这行，但据我所知，IT实习是最好的学习，而不是妥协于生活在外干别的，因为不是一天两天的事，这样对专业知识不增反减，当断不断，反受其乱。汝大可回来或者去别处好好找份实习增长经验，他日有了经验再战杭州不迟，毕竟你还年轻！" class="headerlink" title="先来看一段好友于己的一些话:汝之心急，找工作之迫切，放弃校招平台，毅然决然去异地社招，汝之勇气，已盖过众人矣。汝在外已一月有余，还未找到相关之岗位，便证明汝之不足。去校招历练，未尝不可，社招随时可去也，此对能力要求之高，汝已经历。汝若以回头便是丢人为由，好好想想这人丢哪了，你又认识谁，谁又认识你？浪子回头，乃是重整旗鼓，东山再起。哪条路好走，那条路难走。好马不吃回头草，可是食不饱，力不足，才美不外先，怎能不食也。说句身边现实的，连smb当初铁骨铮铮说想快点工作，如今不也回来深造之。对未来之投资，过了如今之年纪，机会甚少之。我也不是劝你升本，劝你深思熟虑之，非杭州不取，乃不是好策也。来杭州干IT应该是你目前的理想，但现实你又干的啥。我眼里看到的是每天的你都在煎熬，干现在与理想无关之工作是为了什么？赚生活费立足于杭州,还是苟延残喘于杭州?是否应该退而求其次，建议回来参加校招找份相关岗位历练，或者继续学习。不说校招也罢，华夏之大，为啥非杭州不可？而不是现在干的完全不相干的工作，心情也是窝心烦躁罢了。我虽决意不干IT这行，但据我所知，IT实习是最好的学习，而不是妥协于生活在外干别的，因为不是一天两天的事，这样对专业知识不增反减，当断不断，反受其乱。汝大可回来或者去别处好好找份实习增长经验，他日有了经验再战杭州不迟，毕竟你还年轻！"></a>先来看一段好友于己的一些话:汝之心急，找工作之迫切，放弃校招平台，毅然决然去异地社招，汝之勇气，已盖过众人矣。汝在外已一月有余，还未找到相关之岗位，便证明汝之不足。去校招历练，未尝不可，社招随时可去也，此对能力要求之高，汝已经历。汝若以回头便是丢人为由，好好想想这人丢哪了，你又认识谁，谁又认识你？浪子回头，乃是重整旗鼓，东山再起。哪条路好走，那条路难走。好马不吃回头草，可是食不饱，力不足，才美不外先，怎能不食也。说句身边现实的，连smb当初铁骨铮铮说想快点工作，如今不也回来深造之。对未来之投资，过了如今之年纪，机会甚少之。我也不是劝你升本，劝你深思熟虑之，非杭州不取，乃不是好策也。来杭州干IT应该是你目前的理想，但现实你又干的啥。我眼里看到的是每天的你都在煎熬，干现在与理想无关之工作是为了什么？赚生活费立足于杭州,还是苟延残喘于杭州?是否应该退而求其次，建议回来参加校招找份相关岗位历练，或者继续学习。不说校招也罢，华夏之大，为啥非杭州不可？而不是现在干的完全不相干的工作，心情也是窝心烦躁罢了。我虽决意不干IT这行，但据我所知，IT实习是最好的学习，而不是妥协于生活在外干别的，因为不是一天两天的事，这样对专业知识不增反减，当断不断，反受其乱。汝大可回来或者去别处好好找份实习增长经验，他日有了经验再战杭州不迟，毕竟你还年轻！</h5><p><img src="https://img.bhongjun.com/hexo-blog-img/2019/03/qi_body1.jpg" alt="年轻"></p>
<h5 id="我竟一时语塞无语凝噎"><a href="#我竟一时语塞无语凝噎" class="headerlink" title="我竟一时语塞无语凝噎"></a>我竟一时语塞无语凝噎</h5><h5 id="好友句句乃肺腑之言，无不触及我内心深处"><a href="#好友句句乃肺腑之言，无不触及我内心深处" class="headerlink" title="好友句句乃肺腑之言，无不触及我内心深处"></a>好友句句乃肺腑之言，无不触及我内心深处</h5><h5 id="余-弱冠之年有余一，生性执拗、孤僻。自负于人不喜与人交际。心中有一执念”对我好一分我便对你十分好”却是不曾想这个比例的结果为零。余曾于抖音某视频中见过一条排行第一的评论-人不能对太好，狗不能喂太饱。若是在弱冠之年以前想来是不太认同，但如今这个年纪受到时间的洗礼，倒觉十分在理。"><a href="#余-弱冠之年有余一，生性执拗、孤僻。自负于人不喜与人交际。心中有一执念”对我好一分我便对你十分好”却是不曾想这个比例的结果为零。余曾于抖音某视频中见过一条排行第一的评论-人不能对太好，狗不能喂太饱。若是在弱冠之年以前想来是不太认同，但如今这个年纪受到时间的洗礼，倒觉十分在理。" class="headerlink" title="余 弱冠之年有余一，生性执拗、孤僻。自负于人不喜与人交际。心中有一执念”对我好一分我便对你十分好”却是不曾想这个比例的结果为零。余曾于抖音某视频中见过一条排行第一的评论:人不能对太好，狗不能喂太饱。若是在弱冠之年以前想来是不太认同，但如今这个年纪受到时间的洗礼，倒觉十分在理。"></a>余 弱冠之年有余一，生性执拗、孤僻。自负于人不喜与人交际。心中有一执念”对我好一分我便对你十分好”却是不曾想这个比例的结果为零。余曾于抖音某视频中见过一条排行第一的评论:人不能对太好，狗不能喂太饱。若是在弱冠之年以前想来是不太认同，但如今这个年纪受到时间的洗礼，倒觉十分在理。</h5><p><img src="https://img.bhongjun.com/hexo-blog-img/2019/03/qi_body2.jpg" alt="人心"></p>
<h4 id="“何为技术？”，友人答曰-”技术就是会大多数人不会的！”"><a href="#“何为技术？”，友人答曰-”技术就是会大多数人不会的！”" class="headerlink" title="“何为技术？”，友人答曰:”技术就是会大多数人不会的！”"></a>“何为技术？”，友人答曰:”技术就是会大多数人不会的！”</h4><p><img src="https://img.bhongjun.com/hexo-blog-img/2019/03/qi_body3.jpg" alt="IT"></p>
<h4 id="弱冠之年有余一，独”还年轻”这一优势，想来也是可笑的。从一人单枪匹马初到无半个亲戚朋友的天堂之地，尚接近一月，从坚定专业对口的工作实习之，再到骑驴找马，从认知到接受。似是像对生活妥协，但仍心有不甘，奈何现实无视了我的不甘，他人之言及友人所言，只怕以后越走越远，骑着驴便再也找寻不到马了。还有九年便是中年危机的时刻来临，若是于此之前无法成功一直干着基层的工作，此后便再无出头之日。虽说有知命之年才开始创业到成功为家喻户晓但此例也是个数。念及至此，余痛心。"><a href="#弱冠之年有余一，独”还年轻”这一优势，想来也是可笑的。从一人单枪匹马初到无半个亲戚朋友的天堂之地，尚接近一月，从坚定专业对口的工作实习之，再到骑驴找马，从认知到接受。似是像对生活妥协，但仍心有不甘，奈何现实无视了我的不甘，他人之言及友人所言，只怕以后越走越远，骑着驴便再也找寻不到马了。还有九年便是中年危机的时刻来临，若是于此之前无法成功一直干着基层的工作，此后便再无出头之日。虽说有知命之年才开始创业到成功为家喻户晓但此例也是个数。念及至此，余痛心。" class="headerlink" title="弱冠之年有余一，独”还年轻”这一优势，想来也是可笑的。从一人单枪匹马初到无半个亲戚朋友的天堂之地，尚接近一月，从坚定专业对口的工作实习之，再到骑驴找马，从认知到接受。似是像对生活妥协，但仍心有不甘，奈何现实无视了我的不甘，他人之言及友人所言，只怕以后越走越远，骑着驴便再也找寻不到马了。还有九年便是中年危机的时刻来临，若是于此之前无法成功一直干着基层的工作，此后便再无出头之日。虽说有知命之年才开始创业到成功为家喻户晓但此例也是个数。念及至此，余痛心。"></a>弱冠之年有余一，独”还年轻”这一优势，想来也是可笑的。从一人单枪匹马初到无半个亲戚朋友的天堂之地，尚接近一月，从坚定专业对口的工作实习之，再到骑驴找马，从认知到接受。似是像对生活妥协，但仍心有不甘，奈何现实无视了我的不甘，他人之言及友人所言，只怕以后越走越远，骑着驴便再也找寻不到马了。还有九年便是中年危机的时刻来临，若是于此之前无法成功一直干着基层的工作，此后便再无出头之日。虽说有知命之年才开始创业到成功为家喻户晓但此例也是个数。念及至此，余痛心。</h4><p><img src="https://img.bhongjun.com/hexo-blog-img/2019/03/hongjun_cover.jpg" alt="鬼帝"></p>
<h4 id="鸿钧不甘于此状！？"><a href="#鸿钧不甘于此状！？" class="headerlink" title="鸿钧不甘于此状！？"></a>鸿钧不甘于此状！？</h4>]]></content>
      <categories>
        <category>人生</category>
      </categories>
      <tags>
        <tag>岁月</tag>
      </tags>
  </entry>
  <entry>
    <title>温柔了岁月，惊艳了年华</title>
    <url>/2019/03/30/jingyan/</url>
    <content><![CDATA[<!-- keywords: 温柔了岁月，惊艳了年华
description: 年轻时最好不要遇到太惊艳的人，不然后半生满是遗憾 -->
<!-- bgm-起风了 -->
<h3 id="年轻时最好不要遇到太惊艳的人，不然后半生满是遗憾"><a href="#年轻时最好不要遇到太惊艳的人，不然后半生满是遗憾" class="headerlink" title="年轻时最好不要遇到太惊艳的人，不然后半生满是遗憾"></a>年轻时最好不要遇到太惊艳的人，不然后半生满是遗憾</h3><p><img src="https://img.bhongjun.com/hexo-blog-img/2019/03/yourname.png" alt="惊艳"></p>
<h5 id="我天性不宜交际。在多数场合，我不是觉得对方乏味，就是害怕对方觉得我乏味。可是我既不愿忍受对方的乏味，也不愿费劲使自己显得有趣，那都太累了。我独处时最轻松，因为我不觉得自己乏味，即使乏味，也自己承受，不累及他人，无需感到不安。"><a href="#我天性不宜交际。在多数场合，我不是觉得对方乏味，就是害怕对方觉得我乏味。可是我既不愿忍受对方的乏味，也不愿费劲使自己显得有趣，那都太累了。我独处时最轻松，因为我不觉得自己乏味，即使乏味，也自己承受，不累及他人，无需感到不安。" class="headerlink" title="我天性不宜交际。在多数场合，我不是觉得对方乏味，就是害怕对方觉得我乏味。可是我既不愿忍受对方的乏味，也不愿费劲使自己显得有趣，那都太累了。我独处时最轻松，因为我不觉得自己乏味，即使乏味，也自己承受，不累及他人，无需感到不安。"></a>我天性不宜交际。在多数场合，我不是觉得对方乏味，就是害怕对方觉得我乏味。可是我既不愿忍受对方的乏味，也不愿费劲使自己显得有趣，那都太累了。我独处时最轻松，因为我不觉得自己乏味，即使乏味，也自己承受，不累及他人，无需感到不安。</h5><p><img src="https://img.bhongjun.com/hexo-blog-img/2019/03/X1.jpg" alt="西多士"></p>
<h5 id="所有人都祝你快乐，我只愿你遍历山河，觉得人间值得"><a href="#所有人都祝你快乐，我只愿你遍历山河，觉得人间值得" class="headerlink" title="所有人都祝你快乐，我只愿你遍历山河，觉得人间值得"></a>所有人都祝你快乐，我只愿你遍历山河，觉得人间值得</h5><h5 id="不过沧浪水，不过原上风-过江千尺浪，入竹千竿斜"><a href="#不过沧浪水，不过原上风-过江千尺浪，入竹千竿斜" class="headerlink" title="不过沧浪水，不过原上风  过江千尺浪，入竹千竿斜"></a>不过沧浪水，不过原上风  过江千尺浪，入竹千竿斜</h5><p><img src="https://img.bhongjun.com/hexo-blog-img/2019/03/X2.jpg" alt="西多士"></p>
<h5 id="用自己喜欢的方式，让心里高兴，这是一个普通人，对生活最好的致敬。"><a href="#用自己喜欢的方式，让心里高兴，这是一个普通人，对生活最好的致敬。" class="headerlink" title="用自己喜欢的方式，让心里高兴，这是一个普通人，对生活最好的致敬。"></a>用自己喜欢的方式，让心里高兴，这是一个普通人，对生活最好的致敬。</h5><h5 id="你走也是诗，躺也成文，怎有烟火浊了身。我糟糠也食，五谷也认，跳一场花旦笑捧。"><a href="#你走也是诗，躺也成文，怎有烟火浊了身。我糟糠也食，五谷也认，跳一场花旦笑捧。" class="headerlink" title="你走也是诗，躺也成文，怎有烟火浊了身。我糟糠也食，五谷也认，跳一场花旦笑捧。"></a>你走也是诗，躺也成文，怎有烟火浊了身。我糟糠也食，五谷也认，跳一场花旦笑捧。</h5><p><img src="https://img.bhongjun.com/hexo-blog-img/2019/03/pgy.jpg" alt="惊艳"></p>
<h5 id="照片已获她本人许可授权"><a href="#照片已获她本人许可授权" class="headerlink" title="照片已获她本人许可授权"></a>照片已获她本人许可授权</h5>]]></content>
      <tags>
        <tag>岁月</tag>
      </tags>
  </entry>
  <entry>
    <title>静思己过</title>
    <url>/2019/06/15/demons/</url>
    <content><![CDATA[<!-- keywords: 静思己过
description: 平心静气，调整好自己的心态 -->

<h4 id="平心静气，调整好自己的心态"><a href="#平心静气，调整好自己的心态" class="headerlink" title="平心静气，调整好自己的心态"></a>平心静气，调整好自己的心态</h4><h5 id="易怒，易躁的脾气不得不改。然则世间诸多因素扰我心志，乱我心态，难堪也。。。"><a href="#易怒，易躁的脾气不得不改。然则世间诸多因素扰我心志，乱我心态，难堪也。。。" class="headerlink" title="易怒，易躁的脾气不得不改。然则世间诸多因素扰我心志，乱我心态，难堪也。。。"></a>易怒，易躁的脾气不得不改。然则世间诸多因素扰我心志，乱我心态，难堪也。。。</h5><p><img src="https://img.bhongjun.com/hexo-blog-img/2019/06/demons_body.jpg" alt="静思己过"></p>
<h5 id="已过半月，想来近段时间常常思考自己的问题，终究是能知道，却又不易去改变。易怒，易躁也时有发生，事后虽能有所思，却是不能有所改"><a href="#已过半月，想来近段时间常常思考自己的问题，终究是能知道，却又不易去改变。易怒，易躁也时有发生，事后虽能有所思，却是不能有所改" class="headerlink" title="已过半月，想来近段时间常常思考自己的问题，终究是能知道，却又不易去改变。易怒，易躁也时有发生，事后虽能有所思，却是不能有所改"></a>已过半月，想来近段时间常常思考自己的问题，终究是能知道，却又不易去改变。易怒，易躁也时有发生，事后虽能有所思，却是不能有所改</h5>]]></content>
  </entry>
  <entry>
    <title>关于鸿钧这个名字</title>
    <url>/2019/05/22/hongjun/</url>
    <content><![CDATA[<!-- keywords: 关于鸿钧这个名字
description: 关于鸿钧这个名字的由来 -->
<!-- bgm--穿越时空的思念 -->

<h3 id="鸿钧起源—"><a href="#鸿钧起源—" class="headerlink" title="鸿钧起源—"></a>鸿钧起源—</h3><h4 id="关于鸿钧这个名字的由来，应该是在我大二时候由心而生的。那时由于种种原由却是不曾地萌生了换名字的想法，也许你会觉得这个很不切实际，很搞笑。但是那时知道现在也还是有这种想法，想着换个名字，换个人，换种活法，可是直到现在，我仍没有将想法付诸于行动。。。"><a href="#关于鸿钧这个名字的由来，应该是在我大二时候由心而生的。那时由于种种原由却是不曾地萌生了换名字的想法，也许你会觉得这个很不切实际，很搞笑。但是那时知道现在也还是有这种想法，想着换个名字，换个人，换种活法，可是直到现在，我仍没有将想法付诸于行动。。。" class="headerlink" title="关于鸿钧这个名字的由来，应该是在我大二时候由心而生的。那时由于种种原由却是不曾地萌生了换名字的想法，也许你会觉得这个很不切实际，很搞笑。但是那时知道现在也还是有这种想法，想着换个名字，换个人，换种活法，可是直到现在，我仍没有将想法付诸于行动。。。"></a>关于鸿钧这个名字的由来，应该是在我大二时候由心而生的。那时由于种种原由却是不曾地萌生了换名字的想法，也许你会觉得这个很不切实际，很搞笑。但是那时知道现在也还是有这种想法，想着换个名字，换个人，换种活法，可是直到现在，我仍没有将想法付诸于行动。。。</h4><p><img src="https://img.bhongjun.com/hexo-blog-img/2019/05/qi_cover.jpg" alt="鸿钧"></p>
<h5 id="如果现在在网上搜索”鸿钧”，断然出现的是鸿钧老祖–道教三清的师傅-明代小说《封神演义》中的角色…"><a href="#如果现在在网上搜索”鸿钧”，断然出现的是鸿钧老祖–道教三清的师傅-明代小说《封神演义》中的角色…" class="headerlink" title="如果现在在网上搜索”鸿钧”，断然出现的是鸿钧老祖–道教三清的师傅/明代小说《封神演义》中的角色…"></a>如果现在在网上搜索”鸿钧”，断然出现的是鸿钧老祖–道教三清的师傅/明代小说《封神演义》中的角色…</h5><h4 id="我决然不是用的关于这个来源，而是自己由心而发想出来的-在这之前丝毫没有看到与此相关的信息-。而我本人现在在互联网上的信息也都一概用的与”鸿钧”相关，例如我的邮箱-bhj-hong-qq-com-我github的账号名也是hongjun500…"><a href="#我决然不是用的关于这个来源，而是自己由心而发想出来的-在这之前丝毫没有看到与此相关的信息-。而我本人现在在互联网上的信息也都一概用的与”鸿钧”相关，例如我的邮箱-bhj-hong-qq-com-我github的账号名也是hongjun500…" class="headerlink" title="我决然不是用的关于这个来源，而是自己由心而发想出来的(在这之前丝毫没有看到与此相关的信息)。而我本人现在在互联网上的信息也都一概用的与”鸿钧”相关，例如我的邮箱(bhj.hong@qq.com),我github的账号名也是hongjun500…"></a>我决然不是用的关于这个来源，而是自己由心而发想出来的(在这之前丝毫没有看到与此相关的信息)。而我本人现在在互联网上的信息也都一概用的与”鸿钧”相关，例如我的邮箱(<a href="mailto:bhj.hong@qq.com">bhj.hong@qq.com</a>),我github的账号名也是hongjun500…</h4>]]></content>
      <tags>
        <tag>鸿钧</tag>
      </tags>
  </entry>
  <entry>
    <title>活成了自己最讨厌的那个人</title>
    <url>/2019/04/03/dislike/</url>
    <content><![CDATA[<!-- keywords: 活成了自己最讨厌的那个人
description: 我终是活成了自己最讨厌的那个人 -->
<!-- bgm-穿越时空的思念 -->

<h3 id="我终是活成了自己最讨厌的那个人"><a href="#我终是活成了自己最讨厌的那个人" class="headerlink" title="我终是活成了自己最讨厌的那个人"></a>我终是活成了自己最讨厌的那个人</h3><h5 id="做着如今的工作也有一周的时间了，每天的工作就如同咸鱼一般。这也正好迎合前面入职的条件：活人就行！如今的境遇，也正好是我想要的，能有自己的空间做自己想要做的事情。虽然不知道结果会是如何，但我依旧坚信并且明白，人生的路很长，得有一技之长来应对随时会变化的生活和时代。"><a href="#做着如今的工作也有一周的时间了，每天的工作就如同咸鱼一般。这也正好迎合前面入职的条件：活人就行！如今的境遇，也正好是我想要的，能有自己的空间做自己想要做的事情。虽然不知道结果会是如何，但我依旧坚信并且明白，人生的路很长，得有一技之长来应对随时会变化的生活和时代。" class="headerlink" title="做着如今的工作也有一周的时间了，每天的工作就如同咸鱼一般。这也正好迎合前面入职的条件：活人就行！如今的境遇，也正好是我想要的，能有自己的空间做自己想要做的事情。虽然不知道结果会是如何，但我依旧坚信并且明白，人生的路很长，得有一技之长来应对随时会变化的生活和时代。"></a>做着如今的工作也有一周的时间了，每天的工作就如同咸鱼一般。这也正好迎合前面入职的条件：活人就行！如今的境遇，也正好是我想要的，能有自己的空间做自己想要做的事情。虽然不知道结果会是如何，但我依旧坚信并且明白，人生的路很长，得有一技之长来应对随时会变化的生活和时代。</h5><p><img src="https://img.bhongjun.com/hexo-blog-img/2019/04/dislike1.jpg" alt="dislike"></p>
<h5 id="前几日闲来无事，打扰了一些本就不该打扰的人！如今深知不该，好在为时不晚。。。看着身边别人上班也是很闲却打着游戏，看着直播视频。。。吾深知我们不一样，家境、目标、追求、认知等等都是不一样的，道不同不相为谋，我必须让自己忙碌起来，才不至于泯然众人矣。"><a href="#前几日闲来无事，打扰了一些本就不该打扰的人！如今深知不该，好在为时不晚。。。看着身边别人上班也是很闲却打着游戏，看着直播视频。。。吾深知我们不一样，家境、目标、追求、认知等等都是不一样的，道不同不相为谋，我必须让自己忙碌起来，才不至于泯然众人矣。" class="headerlink" title="前几日闲来无事，打扰了一些本就不该打扰的人！如今深知不该，好在为时不晚。。。看着身边别人上班也是很闲却打着游戏，看着直播视频。。。吾深知我们不一样，家境、目标、追求、认知等等都是不一样的，道不同不相为谋，我必须让自己忙碌起来，才不至于泯然众人矣。"></a>前几日闲来无事，打扰了一些本就不该打扰的人！如今深知不该，好在为时不晚。。。看着身边别人上班也是很闲却打着游戏，看着直播视频。。。吾深知我们不一样，家境、目标、追求、认知等等都是不一样的，道不同不相为谋，我必须让自己忙碌起来，才不至于泯然众人矣。</h5><h5 id="最开始五天的咸鱼催收，同样的入职条件：活人。我认识到了这个世界并不是那么美好，人而无信不知其可。杀人偿命，欠债花钱，天经地义。可任却有那么多的不讲信用的老赖，甚至包括有些还是体制内的人员。。。想着那么压抑的办公环境，网上冲浪都不行，结合自身骑驴找马的动机加上父亲认为这种工作容易得罪人等因素下，毅然决然的离职了。这次除了刷新三观，更是深知了得有一技之长，不然连那些入职条件是活人的公司的领导都会瞧不起你-尤其是到了某个年龄段-，其次就是不要相信领导说的，有什么问题尽快提出来，当你说出问题之后，它之前说的话马上成了屁话还会批评你，切记切记。再这之后入职了朋友介绍的一个销售公司，只干了三天，花了打车费一百多，更是摧残了宝贵的休息时间，在这里又懂得了：有的人，你让它一寸，它会进一尺！于是乎裸辞，经历了大概七天，找到了现在的咸鱼工作，销售加售前。。。其实在我认为就是利用别人想赚钱的意愿忽悠别人花钱做不一定能挣钱的兼职。。。"><a href="#最开始五天的咸鱼催收，同样的入职条件：活人。我认识到了这个世界并不是那么美好，人而无信不知其可。杀人偿命，欠债花钱，天经地义。可任却有那么多的不讲信用的老赖，甚至包括有些还是体制内的人员。。。想着那么压抑的办公环境，网上冲浪都不行，结合自身骑驴找马的动机加上父亲认为这种工作容易得罪人等因素下，毅然决然的离职了。这次除了刷新三观，更是深知了得有一技之长，不然连那些入职条件是活人的公司的领导都会瞧不起你-尤其是到了某个年龄段-，其次就是不要相信领导说的，有什么问题尽快提出来，当你说出问题之后，它之前说的话马上成了屁话还会批评你，切记切记。再这之后入职了朋友介绍的一个销售公司，只干了三天，花了打车费一百多，更是摧残了宝贵的休息时间，在这里又懂得了：有的人，你让它一寸，它会进一尺！于是乎裸辞，经历了大概七天，找到了现在的咸鱼工作，销售加售前。。。其实在我认为就是利用别人想赚钱的意愿忽悠别人花钱做不一定能挣钱的兼职。。。" class="headerlink" title="最开始五天的咸鱼催收，同样的入职条件：活人。我认识到了这个世界并不是那么美好，人而无信不知其可。杀人偿命，欠债花钱，天经地义。可任却有那么多的不讲信用的老赖，甚至包括有些还是体制内的人员。。。想着那么压抑的办公环境，网上冲浪都不行，结合自身骑驴找马的动机加上父亲认为这种工作容易得罪人等因素下，毅然决然的离职了。这次除了刷新三观，更是深知了得有一技之长，不然连那些入职条件是活人的公司的领导都会瞧不起你(尤其是到了某个年龄段)，其次就是不要相信领导说的，有什么问题尽快提出来，当你说出问题之后，它之前说的话马上成了屁话还会批评你，切记切记。再这之后入职了朋友介绍的一个销售公司，只干了三天，花了打车费一百多，更是摧残了宝贵的休息时间，在这里又懂得了：有的人，你让它一寸，它会进一尺！于是乎裸辞，经历了大概七天，找到了现在的咸鱼工作，销售加售前。。。其实在我认为就是利用别人想赚钱的意愿忽悠别人花钱做不一定能挣钱的兼职。。。"></a>最开始五天的咸鱼催收，同样的入职条件：活人。我认识到了这个世界并不是那么美好，人而无信不知其可。杀人偿命，欠债花钱，天经地义。可任却有那么多的不讲信用的老赖，甚至包括有些还是体制内的人员。。。想着那么压抑的办公环境，网上冲浪都不行，结合自身骑驴找马的动机加上父亲认为这种工作容易得罪人等因素下，毅然决然的离职了。这次除了刷新三观，更是深知了得有一技之长，不然连那些入职条件是活人的公司的领导都会瞧不起你(尤其是到了某个年龄段)，其次就是不要相信领导说的，有什么问题尽快提出来，当你说出问题之后，它之前说的话马上成了屁话还会批评你，切记切记。再这之后入职了朋友介绍的一个销售公司，只干了三天，花了打车费一百多，更是摧残了宝贵的休息时间，在这里又懂得了：有的人，你让它一寸，它会进一尺！于是乎裸辞，经历了大概七天，找到了现在的咸鱼工作，销售加售前。。。其实在我认为就是利用别人想赚钱的意愿忽悠别人花钱做不一定能挣钱的兼职。。。</h5><p><img src="https://img.bhongjun.com/hexo-blog-img/2019/04/dislike2.jpg" alt="dislike"></p>
<h5 id="以上就是吾一腔孤勇来杭的经历，时至现在，我任然没有忘记自己的追求：干有技术的活！因为我不相信：赚钱的是销售，不是技术！"><a href="#以上就是吾一腔孤勇来杭的经历，时至现在，我任然没有忘记自己的追求：干有技术的活！因为我不相信：赚钱的是销售，不是技术！" class="headerlink" title="以上就是吾一腔孤勇来杭的经历，时至现在，我任然没有忘记自己的追求：干有技术的活！因为我不相信：赚钱的是销售，不是技术！"></a>以上就是吾一腔孤勇来杭的经历，时至现在，我任然没有忘记自己的追求：干有技术的活！因为我不相信：赚钱的是销售，不是技术！</h5><h5 id="曾记得有个关于马云先生一段视频，内容就是某次他看到一个讲师在讲有关销售的问题：如何把梳子卖给和尚！他当即就生气把这个讲师开除了，马云先生认为把梳子卖给和尚，这不是销售之道，而是骗术！想必大多数人也是这种看法，但是为什么会有这种现象呢，有一句很经典的话叫————存在即合理！"><a href="#曾记得有个关于马云先生一段视频，内容就是某次他看到一个讲师在讲有关销售的问题：如何把梳子卖给和尚！他当即就生气把这个讲师开除了，马云先生认为把梳子卖给和尚，这不是销售之道，而是骗术！想必大多数人也是这种看法，但是为什么会有这种现象呢，有一句很经典的话叫————存在即合理！" class="headerlink" title="曾记得有个关于马云先生一段视频，内容就是某次他看到一个讲师在讲有关销售的问题：如何把梳子卖给和尚！他当即就生气把这个讲师开除了，马云先生认为把梳子卖给和尚，这不是销售之道，而是骗术！想必大多数人也是这种看法，但是为什么会有这种现象呢，有一句很经典的话叫————存在即合理！"></a>曾记得有个关于马云先生一段视频，内容就是某次他看到一个讲师在讲有关销售的问题：如何把梳子卖给和尚！他当即就生气把这个讲师开除了，马云先生认为把梳子卖给和尚，这不是销售之道，而是骗术！想必大多数人也是这种看法，但是为什么会有这种现象呢，有一句很经典的话叫————存在即合理！</h5><h5 id="————————————"><a href="#————————————" class="headerlink" title="————————————"></a>————————————</h5><h5 id="不知道是名字中含有一个“真”字还是天性使然，我始终说不出什么假话，哪怕是对待素不相识之人，也都是坦诚以待。无奈却无人知我心意，经过这些时间的打磨，如今的我便也是明白了————自古真情留不住，唯有套路得人心。"><a href="#不知道是名字中含有一个“真”字还是天性使然，我始终说不出什么假话，哪怕是对待素不相识之人，也都是坦诚以待。无奈却无人知我心意，经过这些时间的打磨，如今的我便也是明白了————自古真情留不住，唯有套路得人心。" class="headerlink" title="不知道是名字中含有一个“真”字还是天性使然，我始终说不出什么假话，哪怕是对待素不相识之人，也都是坦诚以待。无奈却无人知我心意，经过这些时间的打磨，如今的我便也是明白了————自古真情留不住，唯有套路得人心。"></a>不知道是名字中含有一个“真”字还是天性使然，我始终说不出什么假话，哪怕是对待素不相识之人，也都是坦诚以待。无奈却无人知我心意，经过这些时间的打磨，如今的我便也是明白了————自古真情留不住，唯有套路得人心。</h5><p><img src="https://img.bhongjun.com/hexo-blog-img/2019/04/dislike3.png" alt="dislike"></p>
<h5 id="我终是活成了自己最讨厌的那个人-1"><a href="#我终是活成了自己最讨厌的那个人-1" class="headerlink" title="我终是活成了自己最讨厌的那个人"></a>我终是活成了自己最讨厌的那个人</h5>]]></content>
      <tags>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>远方应有尽有，远方一无所有</title>
    <url>/2019/04/25/yiju/</url>
    <content><![CDATA[<!-- keywords: 那些一见钟情的句子
description: 我年华虚度，空余一身疲惫，和所有以梦为马的诗人一样，岁月易逝，一滴不剩。 -->


<h3 id="岁月易逝"><a href="#岁月易逝" class="headerlink" title="岁月易逝"></a>岁月易逝</h3><!-- bgm-殇 -->
<h5 id="我年华虚度，空余一身疲惫，和所有以梦为马的诗人一样，岁月易逝，一滴不剩。"><a href="#我年华虚度，空余一身疲惫，和所有以梦为马的诗人一样，岁月易逝，一滴不剩。" class="headerlink" title="我年华虚度，空余一身疲惫，和所有以梦为马的诗人一样，岁月易逝，一滴不剩。"></a>我年华虚度，空余一身疲惫，和所有以梦为马的诗人一样，岁月易逝，一滴不剩。</h5><p><img src="https://img.bhongjun.com/hexo-blog-img/2019/04/yiju_body1.jpg" alt="年华"></p>
<h5 id="诗酒哲学爱情，往往无用。吟无用之诗，醉无用之酒，读无用之书，钟无用之情终于成一无用之人，却因此活的有滋有味"><a href="#诗酒哲学爱情，往往无用。吟无用之诗，醉无用之酒，读无用之书，钟无用之情终于成一无用之人，却因此活的有滋有味" class="headerlink" title="诗酒哲学爱情，往往无用。吟无用之诗，醉无用之酒，读无用之书，钟无用之情终于成一无用之人，却因此活的有滋有味"></a>诗酒哲学爱情，往往无用。吟无用之诗，醉无用之酒，读无用之书，钟无用之情终于成一无用之人，却因此活的有滋有味</h5><h5 id="物质愈丰富，我想要的却愈少，许多人想登上月球，-我却想多看看树。"><a href="#物质愈丰富，我想要的却愈少，许多人想登上月球，-我却想多看看树。" class="headerlink" title="物质愈丰富，我想要的却愈少，许多人想登上月球， 我却想多看看树。"></a>物质愈丰富，我想要的却愈少，许多人想登上月球， 我却想多看看树。</h5><h5 id="林语堂说：“孤独两个字拆开，有孩童，有瓜果，有小犬，有蚊蝇，足以撑起一个盛夏傍晚的巷子口，人情味十足。稚儿擎瓜柳蓬下，细犬逐蝶深巷中。人间繁华多笑语，唯我空余两鬓风。孩童水果猫狗飞蝇当然热闹，可都与你无关，这就叫孤独。”"><a href="#林语堂说：“孤独两个字拆开，有孩童，有瓜果，有小犬，有蚊蝇，足以撑起一个盛夏傍晚的巷子口，人情味十足。稚儿擎瓜柳蓬下，细犬逐蝶深巷中。人间繁华多笑语，唯我空余两鬓风。孩童水果猫狗飞蝇当然热闹，可都与你无关，这就叫孤独。”" class="headerlink" title="林语堂说：“孤独两个字拆开，有孩童，有瓜果，有小犬，有蚊蝇，足以撑起一个盛夏傍晚的巷子口，人情味十足。稚儿擎瓜柳蓬下，细犬逐蝶深巷中。人间繁华多笑语，唯我空余两鬓风。孩童水果猫狗飞蝇当然热闹，可都与你无关，这就叫孤独。”"></a>林语堂说：“孤独两个字拆开，有孩童，有瓜果，有小犬，有蚊蝇，足以撑起一个盛夏傍晚的巷子口，人情味十足。稚儿擎瓜柳蓬下，细犬逐蝶深巷中。人间繁华多笑语，唯我空余两鬓风。孩童水果猫狗飞蝇当然热闹，可都与你无关，这就叫孤独。”</h5><h5 id="传说在北极的人因为天寒地冻，一开口说话就结成冰雪，对方听不见，只好回家慢慢地烤来听。遇到谈情说爱的时候，回家就要仔细酿造当时的气氛，先用情诗情词裁冰，把它切成细细的碎片，加上一点酒来煮，那么，煮出来的话便能使人微醉。倘若情浓，则不可以用炉火，要用烛火再加一杯咖啡，才不会醉得太厉害，还能维持一丝清醒。如果失恋，等不到冰雪尽溶的时候，就放一把大火把雪屋都烧了，烧成另一个春天。"><a href="#传说在北极的人因为天寒地冻，一开口说话就结成冰雪，对方听不见，只好回家慢慢地烤来听。遇到谈情说爱的时候，回家就要仔细酿造当时的气氛，先用情诗情词裁冰，把它切成细细的碎片，加上一点酒来煮，那么，煮出来的话便能使人微醉。倘若情浓，则不可以用炉火，要用烛火再加一杯咖啡，才不会醉得太厉害，还能维持一丝清醒。如果失恋，等不到冰雪尽溶的时候，就放一把大火把雪屋都烧了，烧成另一个春天。" class="headerlink" title="传说在北极的人因为天寒地冻，一开口说话就结成冰雪，对方听不见，只好回家慢慢地烤来听。遇到谈情说爱的时候，回家就要仔细酿造当时的气氛，先用情诗情词裁冰，把它切成细细的碎片，加上一点酒来煮，那么，煮出来的话便能使人微醉。倘若情浓，则不可以用炉火，要用烛火再加一杯咖啡，才不会醉得太厉害，还能维持一丝清醒。如果失恋，等不到冰雪尽溶的时候，就放一把大火把雪屋都烧了，烧成另一个春天。"></a>传说在北极的人因为天寒地冻，一开口说话就结成冰雪，对方听不见，只好回家慢慢地烤来听。遇到谈情说爱的时候，回家就要仔细酿造当时的气氛，先用情诗情词裁冰，把它切成细细的碎片，加上一点酒来煮，那么，煮出来的话便能使人微醉。倘若情浓，则不可以用炉火，要用烛火再加一杯咖啡，才不会醉得太厉害，还能维持一丝清醒。如果失恋，等不到冰雪尽溶的时候，就放一把大火把雪屋都烧了，烧成另一个春天。</h5><p><img src="https://img.bhongjun.com/hexo-blog-img/2019/04/yiju_body2.jpg" alt="冬天"></p>
<h5 id="我慢慢明白了我为什么不快乐，因为我总是期待一个结果。看一本书期待它让我变深刻，发一条短信期待它被回复，对人好期待它也回应好，写一个故事期待它被关注这些预设的期待如果实现，长舒一口气如果没实现昵？自怨自艾。小时候不期待结果，小时候哭笑都不打折。"><a href="#我慢慢明白了我为什么不快乐，因为我总是期待一个结果。看一本书期待它让我变深刻，发一条短信期待它被回复，对人好期待它也回应好，写一个故事期待它被关注这些预设的期待如果实现，长舒一口气如果没实现昵？自怨自艾。小时候不期待结果，小时候哭笑都不打折。" class="headerlink" title="我慢慢明白了我为什么不快乐，因为我总是期待一个结果。看一本书期待它让我变深刻，发一条短信期待它被回复，对人好期待它也回应好，写一个故事期待它被关注这些预设的期待如果实现，长舒一口气如果没实现昵？自怨自艾。小时候不期待结果，小时候哭笑都不打折。"></a>我慢慢明白了我为什么不快乐，因为我总是期待一个结果。看一本书期待它让我变深刻，发一条短信期待它被回复，对人好期待它也回应好，写一个故事期待它被关注这些预设的期待如果实现，长舒一口气如果没实现昵？自怨自艾。小时候不期待结果，小时候哭笑都不打折。</h5><h5 id="我所有的自负皆来自我的自卑，所有的英雄气概都来自于我的软弱。嘴里振振有词是因为心里满是怀疑，深情是因为痛恨自己无情。这世界没有一件事情是虚空而生的，站在光里，背后就会有阴影，这深夜里一片寂静，是因为你还没有听见声音。"><a href="#我所有的自负皆来自我的自卑，所有的英雄气概都来自于我的软弱。嘴里振振有词是因为心里满是怀疑，深情是因为痛恨自己无情。这世界没有一件事情是虚空而生的，站在光里，背后就会有阴影，这深夜里一片寂静，是因为你还没有听见声音。" class="headerlink" title="我所有的自负皆来自我的自卑，所有的英雄气概都来自于我的软弱。嘴里振振有词是因为心里满是怀疑，深情是因为痛恨自己无情。这世界没有一件事情是虚空而生的，站在光里，背后就会有阴影，这深夜里一片寂静，是因为你还没有听见声音。"></a>我所有的自负皆来自我的自卑，所有的英雄气概都来自于我的软弱。嘴里振振有词是因为心里满是怀疑，深情是因为痛恨自己无情。这世界没有一件事情是虚空而生的，站在光里，背后就会有阴影，这深夜里一片寂静，是因为你还没有听见声音。</h5><h5 id="大张旗鼓的离开都是试探，真正的离开没有道别，悄无声息。"><a href="#大张旗鼓的离开都是试探，真正的离开没有道别，悄无声息。" class="headerlink" title="大张旗鼓的离开都是试探，真正的离开没有道别，悄无声息。"></a>大张旗鼓的离开都是试探，真正的离开没有道别，悄无声息。</h5><h5 id="我在意细节，算敏感。但知道体谅，算善良。我说喜欢便是喜欢，我不想回答便是真的不知道如何作答。有时我佯装镇定或笑得开心，心里总觉得自己与这个世界格格不入。不停对抗，学着顺从，冷静旁观，终明白我们都不应该是别人世界的参与者，而是自己世界的建造者。"><a href="#我在意细节，算敏感。但知道体谅，算善良。我说喜欢便是喜欢，我不想回答便是真的不知道如何作答。有时我佯装镇定或笑得开心，心里总觉得自己与这个世界格格不入。不停对抗，学着顺从，冷静旁观，终明白我们都不应该是别人世界的参与者，而是自己世界的建造者。" class="headerlink" title="我在意细节，算敏感。但知道体谅，算善良。我说喜欢便是喜欢，我不想回答便是真的不知道如何作答。有时我佯装镇定或笑得开心，心里总觉得自己与这个世界格格不入。不停对抗，学着顺从，冷静旁观，终明白我们都不应该是别人世界的参与者，而是自己世界的建造者。"></a>我在意细节，算敏感。但知道体谅，算善良。我说喜欢便是喜欢，我不想回答便是真的不知道如何作答。有时我佯装镇定或笑得开心，心里总觉得自己与这个世界格格不入。不停对抗，学着顺从，冷静旁观，终明白我们都不应该是别人世界的参与者，而是自己世界的建造者。</h5><h5 id="人穷尽一生追寻另一个人类共度一生的事，我一直无法理解，或许我自己太有意思，无须他人陪伴，所以我祝你们在对方身上得到的快乐，与我给自己的一样多。"><a href="#人穷尽一生追寻另一个人类共度一生的事，我一直无法理解，或许我自己太有意思，无须他人陪伴，所以我祝你们在对方身上得到的快乐，与我给自己的一样多。" class="headerlink" title="人穷尽一生追寻另一个人类共度一生的事，我一直无法理解，或许我自己太有意思，无须他人陪伴，所以我祝你们在对方身上得到的快乐，与我给自己的一样多。"></a>人穷尽一生追寻另一个人类共度一生的事，我一直无法理解，或许我自己太有意思，无须他人陪伴，所以我祝你们在对方身上得到的快乐，与我给自己的一样多。</h5><p><img src="https://img.bhongjun.com/hexo-blog-img/2019/04/yiju_body3.jpg" alt="祝好"></p>
<h5 id="你看这个人，累得像条狗——生活从来不温柔，但你可以对自己温柔，愿你能从这些句子得到安慰，愿你有一个好的前程，愿你幸福，愿你成为你想成为的任何人。"><a href="#你看这个人，累得像条狗——生活从来不温柔，但你可以对自己温柔，愿你能从这些句子得到安慰，愿你有一个好的前程，愿你幸福，愿你成为你想成为的任何人。" class="headerlink" title="你看这个人，累得像条狗——生活从来不温柔，但你可以对自己温柔，愿你能从这些句子得到安慰，愿你有一个好的前程，愿你幸福，愿你成为你想成为的任何人。"></a>你看这个人，累得像条狗——生活从来不温柔，但你可以对自己温柔，愿你能从这些句子得到安慰，愿你有一个好的前程，愿你幸福，愿你成为你想成为的任何人。</h5>]]></content>
      <tags>
        <tag>岁月</tag>
      </tags>
  </entry>
  <entry>
    <title>time</title>
    <url>/2020/04/20/time/</url>
    <content><![CDATA[<p>再次执笔已然是到了2020年，时隔上次已是半年有余;<br>回忆这段时间莫不是忙碌的工作，虽觉得苦闷，但在所学专业上也算是小有所获，凡事都有着两面性吧！<br>除此之外，一无所获，甚至可以说是一败涂地</p>
]]></content>
  </entry>
  <entry>
    <title>Waldeinsamkeit</title>
    <url>/2020/04/30/Waldeinsamkeit/</url>
    <content><![CDATA[<p>德语<code>Waldeinsamkeit</code></p>
<p><code>置身森林深处，冥冥中仿佛感到与自然的交融的，那种孤独</code></p>
<p>这种感觉由来已久。。。</p>
<p>曾经以为真诚待人的同时也会得到别人的真诚以待，如今不曾想到却是不以为意。</p>
<p>词穷</p>
]]></content>
      <categories>
        <category>情感</category>
      </categories>
      <tags>
        <tag>情感</tag>
      </tags>
  </entry>
  <entry>
    <title>待我好</title>
    <url>/2020/04/27/eason/</url>
    <content><![CDATA[<h5 id="偶然间得到黄伟文写给Eason的浮夸原稿，竟发现听了几十上百遍的浮夸相比原稿少了-待我好-三字。只怕这也是Eason的本意，或许。"><a href="#偶然间得到黄伟文写给Eason的浮夸原稿，竟发现听了几十上百遍的浮夸相比原稿少了-待我好-三字。只怕这也是Eason的本意，或许。" class="headerlink" title="偶然间得到黄伟文写给Eason的浮夸原稿，竟发现听了几十上百遍的浮夸相比原稿少了 待我好 三字。只怕这也是Eason的本意，或许。"></a>偶然间得到黄伟文写给Eason的浮夸原稿，竟发现听了几十上百遍的浮夸相比原稿少了 <strong><code>待我好</code></strong> 三字。只怕这也是Eason的本意，或许。</h5><p><img src="https://img.bhongjun.com/hexo-blog-img/2020/04/fk1.jpg" alt=""><br><img src="https://img.bhongjun.com/hexo-blog-img/2020/04/fk2.jpg" alt=""><br><img src="https://img.bhongjun.com/hexo-blog-img/2020/04/fk3.jpg" alt=""></p>
]]></content>
      <tags>
        <tag>music</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础-string</title>
    <url>/2020/06/30/Java%E5%9F%BA%E7%A1%80-string/</url>
    <content><![CDATA[<h3>Java基础</h3>

<p><strong>String类</strong></p>
<p>1.<code>String</code> 字符串常量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"hongjun500"</span>;</span><br><span class="line"><span class="keyword">int</span> length = str.length();</span><br></pre></td></tr></table></figure>

<p>创建了一个字符串，值为<code>hongjun500</code>；length()方法可以得到字符串的长度，返回int类型；””的长度为0，” “长度为1(空格)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.charAt(<span class="keyword">int</span> index); <span class="comment">// 得到指定位置的字符，index索引值从0开始</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.indexOf(<span class="string">'n'</span>); <span class="comment">// 得到字符‘n’第一次出现的位置(索引值)；</span></span><br><span class="line">str.lastIndexOf(<span class="number">0</span>);<span class="comment">// 与之相反</span></span><br><span class="line">如果字符不存在则返回 -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>字符串的截取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.substring(<span class="number">1</span>); 获取从索引值<span class="number">1</span>开始到结尾的字符串；</span><br><span class="line">str.substring(<span class="number">1</span>,<span class="number">2</span>); 获取从索引值<span class="number">1</span>开始到索引值<span class="number">2</span>(不包含)的字符串；</span><br></pre></td></tr></table></figure>

<p>字符串替换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.replace(<span class="string">"5"</span>,<span class="string">"6"</span>);</span><br></pre></td></tr></table></figure>



<p>字符串分割</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.split(<span class="string">","</span>); 将字符串以“,”分割成String[];</span><br><span class="line">str.split(<span class="string">","</span>,<span class="number">1</span>); 将字符串以“,”分割成String[]并且分割次数为<span class="number">1</span>，这种会影响到最后的结果集，一帮情况下比较少见(视情况而定);</span><br></pre></td></tr></table></figure>

<p>字符串大小写转换</p>
<ul>
<li><code>toLowerCase()</code> 将字符串转换为小写</li>
<li><code>toUpperCase()</code> 将字符串转换为大写</li>
</ul>
<p>字符串比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.equals(<span class="string">"h"</span>); 比较字符串内容是否相同，得到一个<span class="keyword">boolean</span>类型的值；运算符‘==’则是比较地址</span><br></pre></td></tr></table></figure>

<p>2.<strong><code>StringBuilder</code></strong> 类</p>
<p><code>StringBuilder</code> 字符串变量（线程不安全对字符串频繁的进行操作时需要用到）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder  strBuilder = StringBuilder();初始为<span class="number">16</span>个字符</span><br></pre></td></tr></table></figure>

<p>字符串变量的拼接、容量、替换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">strBuilder.apped(<span class="string">"hongjun"</span>);</span><br><span class="line">strBuilder.apped()；支持各种类型的连接</span><br><span class="line">strBuilder.capacity()；获取当前容量(可以存储的字符数，超过了之后会自动分配)</span><br><span class="line">strBuilder.replace(<span class="number">1</span>,<span class="number">2</span>,<span class="string">""</span>)；将索引值<span class="number">1</span>到<span class="number">2</span>(不包含)的字符替换为<span class="string">""</span>;(常用的做法是使用String.replace()，再将String拼接上去)</span><br></pre></td></tr></table></figure>

<p>截取和String的一样</p>
<p>字符串反转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">strBuilder.reverse();</span><br></pre></td></tr></table></figure>

<p>3.<code>StringBuff</code> 类</p>
<p><code>StringBuilder</code> 和 <code>StringBuilder</code> 一样都是字符串变量，方法大体上都是相同的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilder</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">CharSequence</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuffer</span></span></span><br><span class="line"><span class="class">   <span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span></span></span><br><span class="line"><span class="class">   <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">CharSequence</span></span></span><br></pre></td></tr></table></figure>

<p>如上这两个都是继承了相同的抽象类和并且实现了相同的接口，但是需要注意它们各自重写父类的方法是不一样的</p>
<p>例如常用apped()方法：</p>
<p>StringBuilder: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.append(str);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这是直接调用了父类的append方法</p>
<p>StringBuffer:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        toStringCache = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">super</span>.append(str);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// private transient char[] toStringCache;</span></span><br></pre></td></tr></table></figure>

<p>有两处不一样，一是加了和线程有关的 <code>synchronized</code> 关键字，二是有一个字符数组的缓存，每次修改之后就把之前的清掉</p>
<p>通过以上可以明白为啥总是会有说（用String操作少量的数据； StringBuilder操作大量数据；StringBuffer操作多线程下的大量数据）。</p>
<p>关于多线程的一些东西，鉴于工作中还没有一些实际运用的场景(多线程举足轻重)，仅仅是看文章了解知其然而不知其所以然，此处暂时不做阐述。。。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>吵架后的态度，最能看出真心</title>
    <url>/2019/08/10/manner/</url>
    <content><![CDATA[<!-- keywords: 吵架不可怕，吵架后的态度才可怕。
description: 吵架不可怕，吵架后的态度才可怕。 -->
<h4 id="本文非原创"><a href="#本文非原创" class="headerlink" title="本文非原创"></a>本文非原创</h4><p>摘自<a href="https://isujin.com/6281" target="_blank" rel="noopener">素锦</a><br>上周末，远嫁外地的好朋友杨洁回来探亲。我们几个女朋友为她接风。酒过三巡饭过五味后，大家便开启了对婚姻，对现状的吐槽模式。</p>
<p>提起夫妻间鸡毛蒜皮的争吵，更是个个都深有体会。说到吵架时离家出走，大家更是不约而同眼睛齐刷刷看向杨洁，并纷纷露出同情的目光。</p>
<p>吵架后的态度，最能看出真心</p>
<p>其中一个直性子的朋友说，哎呀，幸亏当时听了我妈的话没远嫁，要不然吵架了连个去处都没有，只能大马路溜达，想想就心酸。</p>
<p>怕触到杨洁的痛处，大家都示意她别说了。而她，根本接收不到大家的讯号。继续问，杨洁，每次吵架，你离家出走都去哪啊？</p>
<p>杨洁笑笑，说，我哪都不去，每次吵架都是他离家出走。什么？大家异口同声，都表现得极其诧异，继而，集体数落起那个男人来。</p>
<p>说他自私小气，说他不负责任，说他不是个男人。</p>
<p>杨洁没有打断大家的话，只是静静听大家把话说完。她补充说道，当初正是因为每次吵架都是他离家出走，我才决定嫁给他。</p>
<p>我们一个个眼睛圆溜溜的盯着她，太不可思议了。</p>
<p>杨洁继续说道，我俩第一次吵架特别凶的时候，我拎包准备走，他一把夺过我的包，大声呵斥我，你老实呆着，要走我走。他头也不回的走了，留下气呼呼的我。</p>
<p>第二天一大早，他就拎着豆浆油条出现在两眼肿胀的，怒气未消的我的面前。经不住他的嬉皮笑脸和软磨硬泡，我终于不再和自己饥肠咕噜的肚子过不去。</p>
<p>我一边狼吞虎咽，一边假装兴师问罪，别的我都可以过去，就是你一个大男人离家出走我不能原谅。</p>
<p>他双手搭在我肩膀上，郑重其事地对我说：因为我不想让你一个人出去啊。你在这边没亲戚没朋友的，你出去能去哪？所以只能我出去让你消气。</p>
<p>我不能保证不让你生气，也不能保证不和你吵架，但我可以保证不管如何吵，我都不会放开你的手，我都不会让你一个人孤零零的出去游荡。</p>
<p>杨洁说：那次之后，我就决定要嫁给那个男人。婚后，每次大吵，都是以他离家出走而告终。</p>
<p>窗户望去，看着他的背影，看着这个城市的夜色，虽然生气，但，我不觉得孤独。虽然内心五味杂陈，但，五味里总还有些淡淡的甜味。</p>
<p>有一次，他朋友和我抱怨，嫂子，以后能不能不赶我哥出门，要不然我女朋友该和我翻脸了。</p>
<p>我抬头看他，他也看向我，我们目光相接瞬间发出的讯号，我们都读懂了，那就是，以后少吵架。现在，结婚都五年了，磨合的基本都吵不起架来了。</p>
<p>听完，我们都沉默了。</p>
<p>有人说，男人爱不爱你，吵一架就知道了。</p>
<p>有人说，吵架见人品。</p>
<p>我想说，离家出走也见人品。</p>
<p>杨洁老公离家出走的背后，是不放心，不放心她一个人出门在外。是不舍得，不舍得她一个人孤独无助。是对爱的人，根植于心的，深深的责任感。</p>
<p>昨天，表妹带着孩子回来娘家，说打算离婚。姨妈劝表妹，谁家过日子不红脸，不吵架。舌头和牙齿还要经常碰撞呢。</p>
<p>表妹不顾怀抱中的小外甥，用力嘶吼，你们都不理解我。但凡过得下去，你们以为我愿意离啊。</p>
<p>姨妈也不甘示弱，回吼道，你倒是说说呀，趁你姐也在，我们看看，到底是什么事让你非离不可。</p>
<p>表妹声泪俱下，她说，每次吵架，他从不让她。即使她挺着八个多月的大肚子，即使她抱着一岁多的孩子一晚上不回家，他从不会给她打一个电话。</p>
<p>她说，远嫁外地的她，孤独无依的她，心早就凉了。</p>
<p>姨妈听完，小声低估一句，听来听去都是芝麻点大的事，至于吗？都孩她妈了，不要太矫情了。</p>
<p>表妹都快抓狂了，难道逼的我带着孩子从五楼跳下去，你们才满意吗？表妹的声嘶力竭，姨妈不懂，我懂。</p>
<p>我说，先在家冷静冷静，实在过不下去就离了吧。现在离婚也不算什么，再婚后过得很幸福的，也很多。我一边劝表妹，一边安慰姨妈。</p>
<p>夫妻吵架很常见，但，吵架后，男人如此冷漠的不常见。说到底，其实，就是他不够爱她。</p>
<p>回想起往日和老公闹别扭的种种来，心里还是暖暖的。不管当下怎么吵，怎么闹，哪怕吵得他男人风度尽失，吵得我泼妇本质尽显。</p>
<p>但，在最后我要转身开门而出的那一刻，他都会死死把我抱住。任我哭，任我闹，任我捶，任我打，他都死不松手。</p>
<p>大家都心平气和的时候，他说，他以前看过一个电影，一对情侣吵架，每次都男人追出去，然后俩人和好。</p>
<p>有一次，吵架后女人又跑了出去，这次男人没有及时追出去，女主被迎面来的卡车当场撞死。得到消息后，男人崩溃了。</p>
<p>他懊悔万分，他恨自己为什么没有及时追出去。相爱的两个人，从此阴阳两隔。</p>
<p>他很有感触。和我结婚后，他就发誓：不管怎么吵架，都得关起门来吵。如果实在需要一个人当下离开，才能让对方好过点的话，那个人就是他。因为，让带着情绪的我出去，他不放心。</p>
<p>什么是夫妻：相爱一辈子，争吵一辈子，忍耐一辈子，这就是夫妻。</p>
<p>婚礼上，谁不是心甘情愿的说出那一个“我愿意”，谁不是信心满满的牵起对方的手想要到白头。</p>
<p>然而，一地鸡毛才是生活的真相。每日里柴米油盐和零星琐碎，让人不吵架都难。</p>
<p>&hearts;<br>吵架不可怕，吵架后的态度才可怕。<br>&hearts;</p>
<p><img src="https://img.bhongjun.com/hexo-blog-img/2019/08/manner_body.png" alt="love"></p>
<p>离家出走不要命，离家出走后的漠然才要命。</p>
<p>你，如果爱他，请别蛮不讲理，请别咄咄逼人。</p>
<p>你，如果爱她。请别让她带着伤心无助离开。请别留她一心的漠然。</p>
<p>Author 荆棘鸟<br>BGM Nuit-Silencieuse</p>
]]></content>
      <categories>
        <category>情感</category>
      </categories>
      <tags>
        <tag>情感</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>七月上</title>
    <url>/2019/07/19/qiyueshang/</url>
    <content><![CDATA[<!-- keywords: 七月上
description: 七月上 -->
<!-- bgm-七月上 -->

<h3 id="不知不觉已过一月有余，想来心中有喜亦有悲"><a href="#不知不觉已过一月有余，想来心中有喜亦有悲" class="headerlink" title="不知不觉已过一月有余，想来心中有喜亦有悲"></a>不知不觉已过一月有余，想来心中有喜亦有悲</h3><p><img src="https://img.bhongjun.com/hexo-blog-img/2019/07/qiyueshang_body.jpg" alt="七月上"></p>
<h5 id="心魔难除，心中有一些想法却总又不能去实施老是想着往后推，殊不知这样越是不能够做到，常自知而又不能去改变自己。。。"><a href="#心魔难除，心中有一些想法却总又不能去实施老是想着往后推，殊不知这样越是不能够做到，常自知而又不能去改变自己。。。" class="headerlink" title="心魔难除，心中有一些想法却总又不能去实施老是想着往后推，殊不知这样越是不能够做到，常自知而又不能去改变自己。。。"></a>心魔难除，心中有一些想法却总又不能去实施老是想着往后推，殊不知这样越是不能够做到，常自知而又不能去改变自己。。。</h5><h5 id="不知如何是好，以后有想法就去行动吧，不要想着哪天有空余时间去规划好才做，当断不断反受其乱"><a href="#不知如何是好，以后有想法就去行动吧，不要想着哪天有空余时间去规划好才做，当断不断反受其乱" class="headerlink" title="不知如何是好，以后有想法就去行动吧，不要想着哪天有空余时间去规划好才做，当断不断反受其乱"></a>不知如何是好，以后有想法就去行动吧，不要想着哪天有空余时间去规划好才做，当断不断反受其乱</h5>]]></content>
  </entry>
  <entry>
    <title>格局</title>
    <url>/2020/12/07/%E6%A0%BC%E5%B1%80/</url>
    <content><![CDATA[<p><img src="https://img.bhongjun.com/hexo-blog-img/2020/12/geju_body.jpg" alt="格局"><br><code>格局太小了</code>。</p>
<p>上个月出差的时候，全天无休，除了睡觉吃饭就是写代码。这种状态一直持续了十六天。煎熬中明白还是自己太菜了，于是想着买些书籍学习一下进而提升专业能力。<br>由于项目进度原因导致迟迟未能返杭，快递一直被搁置在丰巢柜中，回杭之后卸下行李第一件事就是拿我的书，如果你以为我是迫不及待地想汲取知识那么你就大错特错了。三天，保管费3元，丰巢柜的事早就全国闻名，就懒得吐槽了，毛泽东主席说过：“资本家都是逐利的”<br>翻开书对照上面技术官网文档一看，结果书上面的内容版本在官网差点找不到了，互联网的更新迭代远比你想象的要快的多，互联网的知识还是得要从互联网上获取，再结合自己的体会，感悟得到原作者想要表达的内容，即达成共识！至此，引以为戒！</p>
<p>好在有一位<a href="https://blog.winterchen.com/" target="_blank" rel="noopener">前辈朋友</a>为我指点了迷津，<code>以后的职业道路发展便以他为航向，再根据自身的脚步走出属于自己的道</code>！</p>
]]></content>
  </entry>
  <entry>
    <title>plan</title>
    <url>/2021/01/03/plan/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5e685398df49335dd45d45e53fa753c28f62a780f2d6603dbef59ce6b2233b36">b8ab86ee8e1a931e428713254bf3434051f4dcb74a2ce382b199d653aa36184c024d4e4403f76289c09532b54c662ee8fe7d516b72bf48814b09911f877187d69fb5c528c378e7e035a3182b7f68e7190a29c0b5ab9d41bc9913615fbc967a952dab5c7be348ffcf40bd99d15fbafe6d474350f081b7bb30d661b2fdcf5a7d48ba7e4199f42ca9318c21d8bcce9ed7fec5446434dcb7fd03c7c15b37bae5408ab32763be970aa4801009f0bc97df5857625c7505ba5bcd670b43cf8a6de58bddb68df681f0c3c6384e1d701f5f92853f20ffebbb307ed6039d1d45992fd26f6282b6f7868c350eb9b34ad858ad4fcbb7ab1ccce045c7afa12912f87f36618f263882ed86cd4de6fd0380938485ce66bce199916073db0672ab73dc7739641f4407fc4f8c9966a142b1c1d583375004662e4bd6614002108d2dbe0d44e1ddda0a42d064cbe5850c9c55d6db9844aff0965e1f2c45916d58d9fbf4e35e6edb45d0fa8f6f9c0974e5616e1f0a571f8c180613dbf0cc46f8744ed85a27b9177a6babece97b23816b033a355bce320bc2af03caaf747a2b6e486cfd173873eda8aec3c1b74fcac8f664ec21e1f79110f6e0c662e4fc372e86b722b36a73f3f061222306a2831f1fb508f183461660e0ade926eb8c2776b76e805a0bc18fe80e2a9465d6b9e50780aa7b86242afb6e7316a9a16cefcee9025bdd4b1c008b25ad8f79376451c15264ccd5617b84913a03432620646b7a8e9f4db3d8d22733d61c6586ed750cff11fbee289bc7b090db5db8eb6113fbf71d7406e70c067c266cae7df61f2688ff06a8db409e6cb67764915a15fab5c81a64c8c4d0de67a5afb9d8f15f76fbfaab762a0f349a4be1a3a96c3cb44db6bcf9f9f826a1e3036b285b82f54a0b5b9c69038528d1903431c09c3b6c24358733bf1dd2f76beab0ef6115d6f4fed0b54b234afc35371f2b4bd634ad89cc168fbe5dd7649377d2829f59a0fbc79a4566cb88f0abae6d06c5db5dc5b55b7ded447252edd68b18aeccab8669f8273b176f3dd93ccdcf68dbca7b01e2f9f1e376de2847fc228689684eba933f8f92cc5e17962245e9472e2ca153e436317d69adb4a74fb1eb5785f5239306dc39b1ede33c6010af1395db16b9d6bfcaa9758ee39f6a07dce157b268f3c16b84b40d8ea81fa82c57756fadccf5d29da99a00473f1ebb3cee8603bb73f6418a38c744883b96af80356dfabd732ba36e43f51afbb1ec7013227df8fcd14adcf9475c25259acd1c5f6778238af1e948152424eaf548fc9a3fbb5aa7b0f9fcf69c5246b9cd632cfc2a938a2e27e5d01558693279a84c53002280596e15aa49439213e590bc7f37d4c89aa6049ee384effd112712237b82668ee08f11f36f8050f3fb24a1c2d025c248291d9d1989ea2185e7db3b17c5d5796e162796fa4549fd4c42b3a1d155a0c82005a12fab96ce1a01d781d15f499173556f165063b0e846e79bf33c776a450fb2cfc851e58053324367dcfb81d6ac4e5943abf42be2e09f27a49c540556f9421a4e64401d9a3974b4af1be2e9eea671ab3105fcf6cc62312b7cd816238535f7ef6feb17a4904d0097d1d2d1eac025e97c1680d6f999067b3ffeb408611d8f916de2d4b6ea0f3c6fb188b8c81bc153d8b340bbe3b06aeca4dcc922621e84f043dff27ffe070c130fe08a719504cce5cdfcf12abac5fb2a16e8139951f14cc086dc0b58d53f2a1d150c8e8cec75b1a13919fb2e0a597589b8ce7a3c69c0425bbc63ad6ac01c6736e9b7de22d059285714a005074a9f51c9466833eb26df10c30517055dfcc71a4743a37f0bd9c60e1d827ddfdfddf041fdb6eb9f97e524d74f3f4d37600986c30553e2c65223db8cffa3462c6a7447b211df7e2cf3e6453ce341875fe811306f8f51ef922d69cd228d395306d53013f66828cafcbe359a4576c01ee67ea3bbf958d4981f5acd08007892ea9a5e5809dd6226aa336fd9a5a185f26c71c70b7f2f27c6347564a1f4ef9a2748fc295333edbabe0550b95cd47c7806dcbf12ec2873bc2106a1b538adc58daf6275a403b888f1aae6bc96b7f80c2dfb6482715148cb5ecf62b32c296fc657a7c8f390efb0172e031a640b4bdcca6ab055781054daf38d47ae36015cd3a69692895320101d6241a1b5bb0ccedbcd</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-surge">
      <input class="hbe hbe-input-field hbe-input-field-surge" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-surge" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-surge" data-content="您好, 这里需要密码.">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-surge" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M1200,9c0,0-305.005,0-401.001,0C733,9,675.327,4.969,598,4.969C514.994,4.969,449.336,9,400.333,9C299.666,9,0,9,0,9v43c0,0,299.666,0,400.333,0c49.002,0,114.66,3.484,197.667,3.484c77.327,0,135-3.484,200.999-3.484C894.995,52,1200,52,1200,52V9z"></path>
      </svg>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>java基础-集合</title>
    <url>/2020/07/02/java%E5%9F%BA%E7%A1%80-%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<p>Java基础-集合</p>
<p>java集合框架图</p>
<p><img src="https://img.bhongjun.com/hexo-blog-img/2020/07/jihe_body1.png" alt=""></p>
<p>如上图可以看出java集合可以分为Collection和Map两大接口</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">*</span> <span class="string">@see     Set</span></span><br><span class="line"><span class="meta">*</span> <span class="string">@see     List</span></span><br><span class="line"><span class="meta">*</span> <span class="string">@see     Map</span></span><br><span class="line"><span class="meta">*</span> <span class="string">@see     SortedSet</span></span><br><span class="line"><span class="meta">*</span> <span class="string">@see     SortedMap</span></span><br><span class="line"><span class="meta">*</span> <span class="string">@see     HashSet</span></span><br><span class="line"><span class="meta">*</span> <span class="string">@see     TreeSet</span></span><br><span class="line"><span class="meta">*</span> <span class="string">@see     ArrayList</span></span><br><span class="line"><span class="meta">*</span> <span class="string">@see     LinkedList</span></span><br><span class="line"><span class="meta">*</span> <span class="string">@see     Vector</span></span><br><span class="line"><span class="meta">*</span> <span class="string">@see     Collections</span></span><br><span class="line"><span class="meta">*</span> <span class="string">@see     Arrays</span></span><br><span class="line"><span class="meta">*</span> <span class="string">@see     AbstractCollection</span></span><br><span class="line"><span class="meta">*</span> <span class="string">@since 1.2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br></pre></td></tr></table></figure>

<p>常用的实现类有 <strong>ArrayList</strong><code>、</code><strong>LinkedList</strong><code>、</code><strong>HashSet</strong><code>以及</code><strong>HashMap</strong></p>
<ol>
<li><p>ArrayList</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default initial capacity.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>ArrayList的初始容量为10；但是它的容量可以动态增长；<strong>当添加元素达到容量上限时会自动扩容会原始容量的1.5倍</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List arrayList = <span class="keyword">new</span> ArrayList();无参构造实例化;初始容量值<span class="number">10</span>;</span><br><span class="line">List arrayList1 = <span class="keyword">new</span> ArrayList(<span class="number">100</span>);初始容量为<span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<p>如上也可以手动初始化容量</p>
<p>常用方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>boolean add(E e)</td>
<td>将元素插入到集合的末尾</td>
</tr>
<tr>
<td>void add(int Index, E element)</td>
<td>将元素插入到指定索引位置，原先索引位置后面的元素依次向后移动</td>
</tr>
<tr>
<td>void  clear( )</td>
<td>清空集合中所有元素</td>
</tr>
<tr>
<td>boolean  contains(Object  o)</td>
<td>判断集合中是否包含此指定元素，一般用于去除重复元素(Set无重复!!!)</td>
</tr>
<tr>
<td>boolean  remove(Object  o)</td>
<td>删除指定元素</td>
</tr>
<tr>
<td>E  remove(int  index)</td>
<td>删除指定索引位置的元素</td>
</tr>
<tr>
<td>E  set(int  index,  E element)</td>
<td>将元素替换到指定索引位置，和add方法有区别</td>
</tr>
<tr>
<td>E  get(int index);</td>
<td>获取指定索引位置的元素，比较常用</td>
</tr>
<tr>
<td>boolean  isEmpty( )</td>
<td>判断集合是否为空</td>
</tr>
<tr>
<td>int  size();</td>
<td>获取集合中元素个数</td>
</tr>
<tr>
<td>Object[ ]  toArray( )</td>
<td>获取集合中所有元素组成的对象数组</td>
</tr>
<tr>
<td>List<E> subList(int fromIndex, int toIndex)</td>
<td>获取集合中起止位置元素所组成的子列表(<strong>不包含末尾位置</strong>)</td>
</tr>
</tbody></table>
<p><em>由于ArrayList的抽象父类(AbstractCollection)重写了toString方法,因此可以直接以集合名的方式直观的获取集合中的所有元素</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Iterator&lt;E&gt; it = iterator();</span><br><span class="line">        <span class="keyword">if</span> (! it.hasNext())</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"[]"</span>;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            E e = it.next();</span><br><span class="line">            sb.append(e == <span class="keyword">this</span> ? <span class="string">"(this Collection)"</span> : e);</span><br><span class="line">            <span class="keyword">if</span> (! it.hasNext())</span><br><span class="line">                <span class="keyword">return</span> sb.append(<span class="string">']'</span>).toString();</span><br><span class="line">            sb.append(<span class="string">','</span>).append(<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>可以直观的看出使用了迭代器的方式</strong></p>
<p>2.Iterator </p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>boolean hasNext()</td>
<td>如果仍有元素可以迭代，则返回 true</td>
</tr>
<tr>
<td>E next()</td>
<td>返回迭代的下一个元素</td>
</tr>
<tr>
<td>void remove()</td>
<td>从迭代器指向的 collection 中移除迭代器返回的最后一个元素</td>
</tr>
</tbody></table>
<p><strong>迭代器的remover方法还有很大考究门道，过段时间再细究</strong></p>
<p>2020-07-08更新</p>
<p>先贴一段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"烬"</span>);</span><br><span class="line">        list.add(<span class="string">"李青"</span>);</span><br><span class="line">        list.add(<span class="string">"劫"</span>);</span><br><span class="line">        list.add(<span class="string">"盖伦"</span>);</span><br><span class="line">        System.out.println(<span class="string">"list-----"</span>+list);</span><br><span class="line">        Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line">        List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(<span class="string">"iterator.next()---"</span>+iterator.next());</span><br><span class="line">            iterator.remove();</span><br><span class="line">            list1.add(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"list1-------"</span>+list1);</span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------"</span>);</span><br><span class="line">        System.out.println(list);</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list-----[烬, 李青, 劫, 盖伦]</span><br><span class="line">iterator.next()---烬</span><br><span class="line">iterator.next()---劫</span><br><span class="line">list1-------[李青, 盖伦]</span><br><span class="line">-----------------------------------</span><br><span class="line">[李青, 盖伦]</span><br></pre></td></tr></table></figure>

<p><strong>每次调用next()方法，都会得到一个值，那么这个迭代的过程就会相应向后走一步</strong>(打个可能不是很恰当的比喻，数一一个队伍，数了一个之后，相应的会向后面移动一步。。。)上面的这段代码可以看成是首先用next();数了 最前面的”烬”, 打印的结果便是 “烬” ， 然后调用remove();把这个 “烬” 移除队伍，那么此时队伍就变成了[李青, 劫, 盖伦]，接着判断是否还可以数，—-&gt;(  [李青, 劫, 盖伦] 可以继续数—-&gt;)执行，接着数了”李青”并把它放到另一个队伍中去(向后走一步)，再判断是否还可以数，—&gt;(  [李青, 劫, 盖伦] 可以继续数—-&gt;)  执行，此时注意”李青”已经数过了，下一个数的就是”劫”，打印的结果也是劫，接着remove();把这个 “劫” 移除队伍;  这时队伍变成了[李青, 盖伦]再最后数了“盖伦”并同时也将其放到另一个队伍中去，综上队伍已经全部数完(方法不再执行)；那么最后原先的队伍就从[烬, 李青, 劫, 盖伦]变成了[李青, 盖伦]，相应的另一个队伍里也是[李青, 盖伦]。。。</p>
<p><strong>此处用这个放到另一个队伍的比喻不是很恰当，但目的是为了表明这个next();执行的效果—&gt;迭代的过程会相应向后走一步</strong></p>
<p>千人千面，每个人的理解都各不相同，但是最后的明白的都是同一个道理（多搞两把代码打上断点走一遍）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">next();和remove();是相互依存的，调用remove();之前必须先调用next();否则会抛出java.lang.IllegalStateException</span><br></pre></td></tr></table></figure>



<p>3.LinkedList</p>
<p>ArrayList 类常用方法与 List 接口基本相同，<strong>LinkedList 类则比 List 接口多了一些方便操作 头元素和尾元素的方法</strong></p>
<p>常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>void  addFirst(E e)</td>
<td>把新元素插入到列表中的最前位置</td>
</tr>
<tr>
<td>void  addLast(E e)</td>
<td>与上与之相反</td>
</tr>
<tr>
<td>E  getFirst( )</td>
<td>获取列表中最前位置的元素</td>
</tr>
<tr>
<td>E  getLast( )</td>
<td>与上与之相反</td>
</tr>
<tr>
<td>E  peek( )</td>
<td>获取列表中最前位置的元素，但此元素仍保留在列表中</td>
</tr>
<tr>
<td>E  peekFirst( )</td>
<td>获取列表中最前位置的元素，但此元素仍保留在列表中 E</td>
</tr>
<tr>
<td>E  peekLast(</td>
<td>与上与之相反</td>
</tr>
<tr>
<td>E  poll( )</td>
<td>获取列表中最前位置的元素，同时把此元素从列表中删除</td>
</tr>
<tr>
<td>E  pollFirst( )</td>
<td>获取列表中最前位置的元素，同时把此元素从列表中删除</td>
</tr>
<tr>
<td>E  pollLast(</td>
<td>获取列表中最后位置的元素，同时把此元素从列表中删除</td>
</tr>
<tr>
<td>void  push(E e)</td>
<td>把指定元素压入到栈顶</td>
</tr>
<tr>
<td>E  pop( )</td>
<td>从栈中弹出栈顶元素</td>
</tr>
</tbody></table>
<p><strong>ArrayList 的内部实现是基于内部数组 Object[]，类似于可变长的数组。LinkedList 的内部 实现是基于一组连接的记录，类似于一个链表结构。 在 ArrayList 的前面或中间插入数据时，必须将其后的所有数据相应的后移，花费较多时间，所以，当程序添加元素主要是在后面，并且需要随机地访问其中的元素时，优先使用 ArrayList 会得到比较好的性能;</strong></p>
<p><strong>访问 LinkedList 中的某个元素时，就必须从链表的一端开始沿着连接方向一个一个元素地 去查找，直到找到所需的元素为止，但在添加元素到原有元素中间时效率很高，所以，当程序需要经常在指定位置添加元素，并且按照顺序访问其中的元素时，优先使用 LinkedList(随机访问的效率比较低)</strong></p>
<p>4.HashSet</p>
<p>HashSet 类是将元素存储在散列表中，适合用于不需要有序的元素序列，并能实现快速查 找特定元素。如果想要提高 HashSet 的性能，可以指定 HashSet 中元素的个数；如果大约知道 HashSet 中最终会插入多少元素，可以把元素个数设置为其值的 1.5 倍；如果元素过多，将导 致 HashSet 检索性能下降</p>
<p>HashSet();方法的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5024744406713321676L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has</span></span><br><span class="line"><span class="comment">     * default initial capacity (16) and load factor (0.75).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>以上只是无参构造方法HashSet();其后还有一些有参构造方法，无一例外都是通过 new HashMap()的方式得到的</p>
<p>HashSet的常用方法有如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>boolean add(E e)</td>
<td>如果指定的元素尚不存在，则将其添加到该集合中</td>
</tr>
<tr>
<td>boolean contains(Object o)</td>
<td>如果此集合包含指定的元素，则返回 true，否则返回 false</td>
</tr>
<tr>
<td>boolean isEmpty()</td>
<td>如果此集合不包含任何元素，则返回 true，否则返回 false</td>
</tr>
<tr>
<td>Iterator<E> iterator()</td>
<td>返回此集合中元素的迭代器</td>
</tr>
<tr>
<td>boolean remove(Object o)</td>
<td>从该集合中删除指定的元素</td>
</tr>
<tr>
<td>int size()</td>
<td>返回此集合中的元素数量</td>
</tr>
</tbody></table>
<p>就常用方法而言，Set 接口与 Collection 接口基本一致</p>
<p>HashSet类里并无获取元素的方法，只能通过Set里面的Iterator 获取</p>
<p>所有的Collection都实现了 <code>Iterator</code> 接口</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>map</title>
    <url>/2020/07/14/map/</url>
    <content><![CDATA[<h6>
Map 接口是映射类的顶层接口，SortedMap 接口提供了排序功能，最经常使用到的已实现
Map 接口的类有 HashMap 和 TreeMap。HashMap 对“键”进行散列；TreeMap 实现了 SortedMap
接口，通过用排序方法根据元素的键的排序结果把元素组织到树中。
</h6>

<p>1.HashMap</p>
<p>常用方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>void clear()</td>
<td>清空所有元素</td>
</tr>
<tr>
<td>boolean containsKey(Object key)</td>
<td>判断是否包含指定的键</td>
</tr>
<tr>
<td>boolean containsValue(Object value)</td>
<td>判断是否包含指定的值</td>
</tr>
<tr>
<td>Collection values( )</td>
<td>获得所有值所组成的集合</td>
</tr>
<tr>
<td>Set keySet( )</td>
<td>获得键所组成的集合</td>
</tr>
<tr>
<td>Set&gt; entrySet( )</td>
<td>获得映射组成的集合(与values不同)</td>
</tr>
<tr>
<td>V get(Object key)</td>
<td>获得指定键对应的值(如果没有则返回一个null)</td>
</tr>
<tr>
<td>V put(K key, V value)</td>
<td>建立指定键与值之间的关联</td>
</tr>
<tr>
<td>V remove(Object key)</td>
<td>如果存在，则从此映射中删除指定键的映射，并返回对应的值；反之则返回null</td>
</tr>
</tbody></table>
<p>未完待记录…</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch安装部署</title>
    <url>/2021/06/06/elasticsearch/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">官网</a>找到所需版本的<a href="https://www.elastic.co/cn/elasticsearch/" target="_blank" rel="noopener">elasticsearch</a>和<a href="https://www.elastic.co/cn/kibana" target="_blank" rel="noopener">kibana</a>下载对应系统的包或者使用docker的方式</p>
<p><strong>elasticsearch和kibana的版本必须对应一致</strong></p>
<h4 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h4><blockquote>
<p>分布式搜索引擎</p>
</blockquote>
<h5 id="集群方式部署elasticsearch（win版）"><a href="#集群方式部署elasticsearch（win版）" class="headerlink" title="集群方式部署elasticsearch（win版）"></a>集群方式部署elasticsearch（win版）</h5><p><strong>version</strong> 7.13.0</p>
<p>下载的压缩包解压出三份对应三个节点的部署</p>
<p>更改config目录下的elasticsearch.yml如下所示</p>
<p>node-1:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ======================== Elasticsearch Configuration =========================</span></span><br><span class="line"><span class="string">多节点部署指定唯一的集群名称</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">elasticsearch-app</span></span><br><span class="line"><span class="comment"># ------------------------------------ Node ------------------------------------</span></span><br><span class="line"><span class="comment"># Use a descriptive name for the node:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Add custom attributes to the node:</span></span><br><span class="line"><span class="comment"># ---------------------------------- Network -----------------------------------</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="comment"># By default Elasticsearch listens for HTTP traffic on the first free port it</span></span><br><span class="line"><span class="comment"># finds starting at 9200. Set a specific HTTP port here:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="comment"># 为了集群各节点之间的指令通信</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9300</span></span><br><span class="line"><span class="comment"># 允许前端跨域访问</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br><span class="line"><span class="comment"># 发现集群之间各个节点,对应transport.tcp.port</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> <span class="string">["127.0.0.1:9300",</span> <span class="string">"127.0.0.1:9301"</span><span class="string">,</span> <span class="string">"127.0.0.1:9302"</span><span class="string">]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Bootstrap the cluster using an initial set of master-eligible nodes:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化主节点，三个节点都可以竞选主</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> <span class="string">["127.0.0.1:9300",</span> <span class="string">"127.0.0.1:9301"</span><span class="string">,</span> <span class="string">"127.0.0.1:9302"</span><span class="string">]</span></span><br></pre></td></tr></table></figure>

<p>node-2:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ======================== Elasticsearch Configuration =========================</span></span><br><span class="line"><span class="string">多节点部署指定唯一的集群名称</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">elasticsearch-app</span></span><br><span class="line"><span class="comment"># ------------------------------------ Node ------------------------------------</span></span><br><span class="line"><span class="comment"># Use a descriptive name for the node:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Add custom attributes to the node:</span></span><br><span class="line"><span class="comment"># ---------------------------------- Network -----------------------------------</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="comment"># By default Elasticsearch listens for HTTP traffic on the first free port it</span></span><br><span class="line"><span class="comment"># finds starting at 9200. Set a specific HTTP port here:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9201</span></span><br><span class="line"><span class="comment"># 为了集群各节点之间的指令通信</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9301</span></span><br><span class="line"><span class="comment"># 允许前端跨域访问</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br><span class="line"><span class="comment"># 发现集群之间各个节点,对应transport.tcp.port</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> <span class="string">["127.0.0.1:9300",</span> <span class="string">"127.0.0.1:9301"</span><span class="string">,</span> <span class="string">"127.0.0.1:9302"</span><span class="string">]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Bootstrap the cluster using an initial set of master-eligible nodes:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化主节点，三个节点都可以竞选主</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> <span class="string">["127.0.0.1:9300",</span> <span class="string">"127.0.0.1:9301"</span><span class="string">,</span> <span class="string">"127.0.0.1:9302"</span><span class="string">]</span></span><br></pre></td></tr></table></figure>

<p>node-3:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ======================== Elasticsearch Configuration =========================</span></span><br><span class="line"><span class="string">多节点部署指定唯一的集群名称</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">elasticsearch-app</span></span><br><span class="line"><span class="comment"># ------------------------------------ Node ------------------------------------</span></span><br><span class="line"><span class="comment"># Use a descriptive name for the node:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Add custom attributes to the node:</span></span><br><span class="line"><span class="comment"># ---------------------------------- Network -----------------------------------</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="comment"># By default Elasticsearch listens for HTTP traffic on the first free port it</span></span><br><span class="line"><span class="comment"># finds starting at 9200. Set a specific HTTP port here:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9202</span></span><br><span class="line"><span class="comment"># 为了集群各节点之间的指令通信</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9302</span></span><br><span class="line"><span class="comment"># 允许前端跨域访问</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br><span class="line"><span class="comment"># 发现集群之间各个节点,对应transport.tcp.port</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> <span class="string">["127.0.0.1:9300",</span> <span class="string">"127.0.0.1:9301"</span><span class="string">,</span> <span class="string">"127.0.0.1:9302"</span><span class="string">]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Bootstrap the cluster using an initial set of master-eligible nodes:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化主节点，三个节点都可以竞选主</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> <span class="string">["127.0.0.1:9300",</span> <span class="string">"127.0.0.1:9301"</span><span class="string">,</span> <span class="string">"127.0.0.1:9302"</span><span class="string">]</span></span><br></pre></td></tr></table></figure>

<p>启动：双击/bin目录下的elasticsearch.bat即可，linux则为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/bin/elasticsearch</span><br></pre></td></tr></table></figure>

<p>启动窗口如有中文乱码可添加对应config下的jvm.options中的</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">-Dfile.encoding</span>=<span class="string">GBK</span></span><br></pre></td></tr></table></figure>

<p>访问<a href="http://locathost:端口/_cat查看对应节点的辅助命令：">http://locathost:端口/_cat查看对应节点的辅助命令：</a></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">/_cat/allocation</span></span><br><span class="line"><span class="attr">/_cat/shards</span></span><br><span class="line"><span class="attr">/_cat/shards/&#123;index&#125;</span></span><br><span class="line"><span class="attr">/_cat/master</span></span><br><span class="line"><span class="attr">/_cat/nodes</span></span><br><span class="line"><span class="attr">/_cat/tasks</span></span><br><span class="line"><span class="attr">/_cat/indices</span></span><br><span class="line"><span class="attr">/_cat/indices/&#123;index&#125;</span></span><br><span class="line"><span class="attr">/_cat/segments</span></span><br><span class="line"><span class="attr">/_cat/segments/&#123;index&#125;</span></span><br><span class="line"><span class="attr">/_cat/count</span></span><br><span class="line"><span class="attr">/_cat/count/&#123;index&#125;</span></span><br><span class="line"><span class="attr">/_cat/recovery</span></span><br><span class="line"><span class="attr">/_cat/recovery/&#123;index&#125;</span></span><br><span class="line"><span class="attr">/_cat/health</span></span><br><span class="line"><span class="attr">/_cat/pending_tasks</span></span><br><span class="line"><span class="attr">/_cat/aliases</span></span><br><span class="line"><span class="attr">/_cat/aliases/&#123;alias&#125;</span></span><br><span class="line"><span class="attr">/_cat/thread_pool</span></span><br><span class="line"><span class="attr">/_cat/thread_pool/&#123;thread_pools&#125;</span></span><br><span class="line"><span class="attr">/_cat/plugins</span></span><br><span class="line"><span class="attr">/_cat/fielddata</span></span><br><span class="line"><span class="attr">/_cat/fielddata/&#123;fields&#125;</span></span><br><span class="line"><span class="attr">/_cat/nodeattrs</span></span><br><span class="line"><span class="attr">/_cat/repositories</span></span><br><span class="line"><span class="attr">/_cat/snapshots/&#123;repository&#125;</span></span><br><span class="line"><span class="attr">/_cat/templates</span></span><br><span class="line"><span class="attr">/_cat/ml/anomaly_detectors</span></span><br><span class="line"><span class="attr">/_cat/ml/anomaly_detectors/&#123;job_id&#125;</span></span><br><span class="line"><span class="attr">/_cat/ml/trained_models</span></span><br><span class="line"><span class="attr">/_cat/ml/trained_models/&#123;model_id&#125;</span></span><br><span class="line"><span class="attr">/_cat/ml/datafeeds</span></span><br><span class="line"><span class="attr">/_cat/ml/datafeeds/&#123;datafeed_id&#125;</span></span><br><span class="line"><span class="attr">/_cat/ml/data_frame/analytics</span></span><br><span class="line"><span class="attr">/_cat/ml/data_frame/analytics/&#123;id&#125;</span></span><br><span class="line"><span class="attr">/_cat/transforms</span></span><br><span class="line"><span class="attr">/_cat/transforms/&#123;transform_id&#125;</span></span><br></pre></td></tr></table></figure>

<p>../_cat/health 查看各个节点的健康状态：</p>
<ul>
<li><p>yellow，代表分布式场景下一些分片的缺失；</p>
</li>
<li><p>green是健康的状态，对外可以提供读写服务；</p>
</li>
<li><p>red具有部分功能，需要尽快修复</p>
</li>
</ul>
<p>_cat/nodes 查看节点数</p>
<h4 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h4><blockquote>
<p>对应elasticsearch的可视化操作控制台</p>
</blockquote>
<p><strong>version</strong>  7.13.0</p>
<ol>
<li>解压缩</li>
<li>启动同上：对应目录下对应的应用名称</li>
</ol>
<p>此版本直接启动通过<a href="http://localhost:5601访问时会出现500错误码，对应日志文件输出：">http://localhost:5601访问时会出现500错误码，对应日志文件输出：</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TypeError [ERR_INVALID_CHAR]: Invalid character in header content [<span class="string">"kbn-name"</span>]</span><br><span class="line">    at ServerResponse.setHeader (_http_outgoing.js:<span class="number">561</span>:<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>需要指定kibana的服务名称，即更改对应/config下的kibana.yaml文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The Kibana server's name.  This is used for display purposes.</span></span><br><span class="line"><span class="attr">server.name:</span> <span class="string">"kibana"</span></span><br><span class="line"><span class="comment"># The URLs of the Elasticsearch instances to use for all your queries.</span></span><br><span class="line"><span class="comment"># 这是默认的elasticsearch端口</span></span><br><span class="line"><span class="comment"># elasticsearch.hosts: ["http://localhost:9200"]</span></span><br></pre></td></tr></table></figure>

<p>kibana控制台</p>
<ul>
<li>Manage模块下Data下Index Management可查看对应节点中索引的数据清空</li>
<li>Dev Tools - Console可操作elasticsearch中的数据</li>
</ul>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=69827&auto=1&height=66"></iframe>]]></content>
      <categories>
        <category>分布式搜索引擎中间件</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
</search>
